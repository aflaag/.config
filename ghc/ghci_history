"a" ++ "b"
exit()
t$ t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
t. t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
t t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
t (xs:xss) = zipWith (:) xs xss
t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
1:([2, 3])
t (t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
t$ t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
t. t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
t t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
1:([2, 3])
t [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
t (xs:xss) = zipWith (,) xs xss
f [[1, 2, 3]]
f [[1]]
f [xs] = map (\x -> [x]) xs
f [[4]]
f [[1]]
show f [1, 2, 3]
f [1, 2, 3]
f [[1, 2], [2, 3], [3, 4]]
f [[1], [2], [3]]
:t f
f [xs] = map (\x -> [x]) xs
:t f
f [[1], [2], [3]]
f _ = []
f [xs] = map (\x -> [x]) xs
f [[1], [2], [3]]
f [] = []
f [xs] = map (\x -> [x]) xs
f [[1], [2], [3]]
:t f
f [xs] = map (\x -> [x]) xs
f [] = []
f [[1], [2], [3]]
f [] = []
f [[1], [2], [3]]
f [1, 2, 3]
:t f
f [xs] = map (\x -> [x]) xs
:t f
f [xs] = map (\x -> [x]) xs
f [xs] = map (\x -> [x]) xd
include Prelude
show u
putStr $ show u
printStr u
u
u = f [1, 2, 3]
f [1, 2, 3]
f [1, 2, 3
f [xs] = map (\x -> [x]) xs
1:[[1], [2]]
1:([1], [2])
1:([1])
(1,[1])
1:[2]
1:2
1:[[1]]
:t foldr
exit()
exit()
exit
